What is Redux?
It helps to understand what this "Redux" thing is in the first place. What does it do? What problems does it help me solve? Why would I want to use it?

Redux is a pattern and library for managing and updating global application state,
where the UI triggers events called "actions" to describe what happened, and separate update logic called "reducers" updates the state in response. 
It serves as a centralized store for state that needs to be used across your entire application, 
with rules ensuring that the state can only be updated in a predictable fashion.


Why Should I Use Redux?
Redux helps you manage "global" state - state that is needed across many parts of your application.

The patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your application is being updated, 
and how your application logic will behave when those changes occur. Redux guides you towards writing code that is predictable and testable, 
which helps give you confidence that your application will work as expected.

When Should I Use Redux?
Redux helps you deal with shared state management, but like any tool, it has tradeoffs. There are more concepts to learn, and more code to write. 
It also adds some indirection to your code, and asks you to follow certain restrictions. It's a trade-off between short term and long term productivity.

Redux is more useful when:

You have large amounts of application state that are needed in many places in the app
The app state is updated frequently over time
The logic to update that state may be complex
The app has a medium or large-sized codebase, and might be worked on by many people
Not all apps need Redux. Take some time to think about the kind of app you're building, and decide what tools would be best to help solve the problems you're working on.

Redux Libraries and Tools
Redux at its core is a small standalone JS library. It is commonly used with several other packages:

Redux Toolkit
Redux Toolkit is our recommended approach for writing Redux logic. It contains packages and functions that we think are essential for building a Redux app. 
Redux Toolkit builds in our suggested best practices, simplifies most Redux tasks, prevents common mistakes, and makes it easier to write Redux applications.

React-Redux
Redux can integrate with any UI framework, and is most frequently used with React. 
React-Redux is our official package that lets your React components interact with a Redux store by reading pieces of state and dispatching actions to update the store.



Redux Application Data Flow
Earlier, we talked about "one-way data flow", which describes this sequence of steps to update the app:

State describes the condition of the app at a specific point in time
The UI is rendered based on that state
When something happens (such as a user clicking a button), the state is updated based on what occurred
The UI re-renders based on the new state
For Redux specifically, we can break these steps into more detail:

Initial setup:
A Redux store is created using a root reducer function
The store calls the root reducer once, and saves the return value as its initial state
When the UI is first rendered, UI components access the current state of the Redux store, and use that data to decide what to render. 
They also subscribe to any future store updates so they can know if the state has changed.

Updates:
Something happens in the app, such as a user clicking a button
The app code dispatches an action to the Redux store, like dispatch({type: 'counter/incremented'})
The store runs the reducer function again with the previous state and the current action, and saves the return value as the new state
The store notifies all parts of the UI that are subscribed that the store has been updated
Each UI component that needs data from the store checks to see if the parts of the state they need have changed.
Each component that sees its data has changed forces a re-render with the new data, so it can update what's shown on the screen